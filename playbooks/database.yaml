- name: play Database
  hosts: db
  become: yes
  tags:
  - db-install
  tasks:

#1) Install Mongodb and Start service
#Ubuntu 18.04 (Bionic)
#https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/

#sudo apt-get install gnupg
    - name: gnupg install
      package:
        name: gnupg
        state: present

#wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -
    - name: mongodb key is added
      apt_key:
        url: https://www.mongodb.org/static/pgp/server-4.4.asc

#echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
    - name: mongodb repository is enabled
      apt_repository:
        repo: deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 multiverse
        state: present
        filename: mongodb-org-4.4

#sudo apt-get install -y mongodb-org
    - name: mongodb is installed
      package:
        name: mongodb-org
        state: present

#sudo systemctl start mongod
    - name: mongodb is started
      service:
        name: mongod
        state: started
        enabled: yes

- name: play database  - configure admin
  hosts: db
  become: yes
  tags:
  - db-config-admin
  tasks:
    #2) drop admin user if exist
    # mongo admin --eval 'db.dropUser("superadmin")'
    #3) create admin user
    # mongo admin --eval 'db.createUser( { user: "superadmin", pwd: "MyPass1234", roles: [ { role: "clusterAdmin", db: "admin" }, { role: "userAdminAnyDatabase", db: "admin" } ] } )'
  - name: admin user
    command: "{{ item }}"
    loop:
    - mongo admin --eval 'db.dropUser("{{ db_admin_user }}")'
    - |
      mongo admin --eval 'db.createUser( { user: "{{ db_admin_user }}", pwd: "{{ db_admin_pass }}", roles: [ { role: "clusterAdmin", db: "admin" }, { role: "userAdminAnyDatabase", db: "admin" } ] } )'
    #4) enable security (/etc/mongod.conf) --> Restart Mongodb
    #> security:
    #>   authorization: "enabled"
  - name: security is enabled
    blockinfile:
      path: /etc/mongod.conf
      block: |
        security:
          authorization: "enabled"
      state: present
    notify: mongodb is restarted
  handlers:
  - name: mongodb is restarted
    service:
      name: mongod
      state: restarted

- name: play for rest of configuration
  hosts: db
  become: yes
  tags:
  - db-config
  tasks:
  # install Pip
  - name: pip3 installed
    package:
      name: python3-pip
      state: latest
  # install pymango
  - name: pip pymongo installed
    pip:
      name: pymongo
      state: latest
    # Create Application user
  - name: todo db user exsits
    mongodb_user:
      login_user: "{{ db_admin_user }}"
      login_password: "{{ db_admin_pass }}"
      database: admin
      user: "{{ db_todo_user }}"
      password: "{{ db_todo_pass }}"
      state: present
      roles:
        - db: "{{ db_name_todo }}"
          role: readWrite
    # DB connection allowed from inside host for APP connectivity
  - name: db accepts connection from anywhere
    lineinfile:
      path: /etc/mongod.conf
      line: "  bindIp: 0.0.0.0"
      regexp: '^(.*)bindIp(.*)$'
      state: present
    notify: mongodb is restarted
  handlers:
  - name: mongodb is restarted
    service:
      name: mongod
      state: restarted
